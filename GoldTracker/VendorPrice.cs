// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ConsoleApp1;
//
//    var vendorPrice = VendorPrice.FromJson(jsonString);

namespace GoldTracker
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class VendorPrice
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("rarity")]
        public string Rarity { get; set; }

        [JsonProperty("vendor_value")]
        public long VendorValue { get; set; }

        [JsonProperty("default_skin")]
        public long DefaultSkin { get; set; }

        [JsonProperty("game_types")]
        public string[] GameTypes { get; set; }

        [JsonProperty("flags")]
        public string[] Flags { get; set; }

        [JsonProperty("restrictions")]
        public object[] Restrictions { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("chat_link")]
        public string ChatLink { get; set; }

        [JsonProperty("icon")]
        public Uri Icon { get; set; }

        [JsonProperty("details")]
        public Details Details { get; set; }
    }

    public partial class Details
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("damage_type")]
        public string DamageType { get; set; }

        [JsonProperty("min_power")]
        public long MinPower { get; set; }

        [JsonProperty("max_power")]
        public long MaxPower { get; set; }

        [JsonProperty("defense")]
        public long Defense { get; set; }

        [JsonProperty("infusion_slots")]
        public object[] InfusionSlots { get; set; }

        [JsonProperty("infix_upgrade")]
        public InfixUpgrade InfixUpgrade { get; set; }

        [JsonProperty("suffix_item_id")]
        public long SuffixItemId { get; set; }

        [JsonProperty("secondary_suffix_item_id")]
        public string SecondarySuffixItemId { get; set; }
    }

    public partial class InfixUpgrade
    {
        [JsonProperty("attributes")]
        public Attribute[] Attributes { get; set; }
    }

    public partial class Attribute
    {
        [JsonProperty("attribute")]
        public string AttributeAttribute { get; set; }

        [JsonProperty("modifier")]
        public long Modifier { get; set; }
    }

    public partial class VendorPrice
    {
        public static VendorPrice FromJson(string json) => JsonConvert.DeserializeObject<VendorPrice>(json, GoldTracker.Converter2.Settings);
    }

    public static class Serialize2
    {
        public static string ToJson(this VendorPrice self) => JsonConvert.SerializeObject(self, GoldTracker.Converter2.Settings);
    }

    internal static class Converter2
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
